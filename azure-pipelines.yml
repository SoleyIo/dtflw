trigger:
- main

variables:
- group: databricks-ci-build-vars

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.8.*
    addToPath: true

- checkout: self

# Version check

- script: |
    if [[ "$(Build.SourceBranchName)" == "main" ]]; then
      exit 0
    fi
        
    new_version=$(python setup.py --version)
    echo new_version $new_version
    new_changesmd_hash=$(sha1sum ./CHANGES.md)
    echo new_changesmd_hash $new_changesmd_hash

    echo "---------------------------------"
    git branch
    echo "---------------------------------"

    git checkout main -- setup.py
    git checkout main -- CHANGES.md
    
    old_version=$(python setup.py --version)
    echo old_version $old_version
    old_changesmd_hash=$(sha1sum ./CHANGES.md)
    echo old_changesmd_hash $old_changesmd_hash

    git checkout -
    
    if [[ "$new_version" == "$old_version" || "$new_changesmd_hash" == "$old_changesmd_hash" ]]; then
        echo Build error! Version in setup.py and/or CHANGES.md has not been updated. Please, update the version and/or log changes.
        exit 1
    fi
  displayName: 'Package version check'

# Install dependencies

- script: |
    python --version
    pip uninstall pyspark
    pip install .
    pip install coverage
  displayName: 'Install dependencies'

# Configure

- script: |
    echo $DATABRICKS_CONNECT_CONFIG > ~/.databricks-connect
  env:
    DATABRICKS_CONNECT_CONFIG: $(databricks_connect_config)
  displayName: 'Configure databricks-connect'
  
# Test

- script: |
    coverage run -m unittest discover && coverage xml
  env:
    AZURE_STORAGE_KEY: $(azure_storage_key)
  displayName: 'Test'

# Publish test coverage

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: 'coverage.xml'
    failIfCoverageEmpty: true

# Package

- script: |
    python setup.py sdist bdist_wheel
    cp CHANGES.md dist/
    cp README.md dist/
    ls dist
  displayName: 'Package to a *.whl'

# Publish
- task: CopyFiles@2
  inputs:
    contents: 'dist/**'
    targetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'dtflwBuildOutputs'
    publishLocation: 'Container'